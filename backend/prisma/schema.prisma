generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id                     String         @id @default(uuid()) @db.Char(40)
  nome                   String         @db.VarChar(100)
  email                  String         @unique @db.VarChar(100)
  senha                  String         @db.Char(60)
  tipoUsuario            TipoUsuario    @relation(fields: [tipoUsuarioId], references: [id])
  tipoUsuarioId          String         @db.Char(40)
  solicitacoesRequisitante Emprestimo[] @relation("Requisitante")
  solicitacoesAprovador  Emprestimo[]  @relation("Aprovador")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @updatedAt @map("updated_at")
  projetos               Projeto[]

  @@map("usuarios")
}

model TipoUsuario {
  id       String    @id @default(uuid()) @db.Char(40)
  rotulo   String    @db.VarChar(10)
  usuarios Usuario[]

  @@map("tipos_usuarios")
}

model Equipamento {
  id              String            @id @default(uuid()) @db.Char(40)
  nome            String            @db.VarChar(100)
  descricao       String            @db.VarChar(5000)
  observacoes     String            @db.VarChar(5000)
  origem          String
  numSerie        String            @db.VarChar(100)
  tombamento      String
  tipoEquipamento String
  statusEquip     StatusEquipamento @default(Laboratorio) @map("status_equipamento")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  solicitacoes    SolicitacaoEquipamento[]

  @@map("equipamento")
}

model Emprestimo {
  id               String             @id @default(uuid()) @db.Char(40)
  requisitanteId   String
  aprovadorId      String
  requisitante     Usuario            @relation("Requisitante", fields: [requisitanteId], references: [id])
  aprovador        Usuario            @relation("Aprovador", fields: [aprovadorId], references: [id])
  dataSolicitacao  DateTime           @default(now()) @map("data_solicitacao")
  dataDevolucao    DateTime?          @map("data_devolucao")
  equipamentos     SolicitacaoEquipamento[]
  statusSolic      StatusSolicitacao  @map("status_solicitacao")
  observacoes      String             @db.VarChar(5000)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  @@map("emprestimo")
}

model SolicitacaoEmprestimo {
  emprestimoId  String
  equipamentoId String
  projetoId     String
  projeto       Projeto     @relation(fields: [projetoId], references: [id])
  emprestimo    Emprestimo  @relation(fields: [emprestimoId], references: [id])
  equipamento   Equipamento @relation(fields: [equipamentoId], references: [id])

  @@id([emprestimoId, equipamentoId])
  @@map("solicitacao_emprestimo")
}

model Projeto {
  id               String                    @id @default(uuid())
  nome             String
  descricao        String                    @db.VarChar(200)
  responsavelId    String                    @db.Char(40)
  responsavel      Usuario                   @relation(fields: [responsavelId], references: [id])
  solicitacoes     SolicitacaoEquipamento[]
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")

  @@map("projeto")
}


enum StatusEquipamento {
  Laboratorio
  Manutencao
  Emprestado
  Reservado
}

enum StatusSolicitacao {
  Solicitado
  Emprestado
  Atraso
  Devolvido
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
